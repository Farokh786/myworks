import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image

# --------------------------
# Project Overview
# --------------------------
st.set_page_config(page_title="iOutlet Education Expansion Dashboard", layout="wide")
st.title("The iOutlet Strategic Dashboard")
st.markdown("""
**Project Title:** *Maximising Impact: The iOutlet's Strategic Expansion in Education*

**Intern:** Khwaja Abdul Ghani Ghafoori  
**University:** University of Dundee | MSc Business Analytics and Finance  
**Internship Period:** June ‚Äì July 2025

---
""")

# --------------------------
# Load Data
# --------------------------
file_path = r"E:\\MSc Business Analytics & Finance Jan25\\Business Analytics Project\\iOutlet_Internship\\Clean_data\\Merged_Data3.xlsx"
sales_df = pd.read_excel(file_path, sheet_name="Sales")
edu_df = sales_df[sales_df['School Match'].str.lower() != "no match"]

# Clean and standardize Region column
edu_df['Region'] = edu_df['Region'].astype(str).str.strip().str.title()

# Filter only valid UK regions
valid_regions = ['England', 'Wales', 'Scotland', 'Northern Ireland', 'Isle Of Man', 'Jersey', 'Guernsey']
edu_df = edu_df[edu_df['Region'].isin(valid_regions)]

# --------------------------
# Sidebar Filters
# --------------------------
st.sidebar.markdown("## üîç Filter Options")
region_filter = st.sidebar.selectbox("Select Region", options=['All'] + sorted(edu_df['Region'].dropna().unique()))
school_type_filter = st.sidebar.selectbox("Select School Type", options=['All'] + sorted(edu_df['School Type'].dropna().unique()))
trust_match_filter = st.sidebar.selectbox("Filter by Trust Match", options=['All', 'Matched Only'])

# Apply filters
if region_filter != 'All':
    edu_df = edu_df[edu_df['Region'] == region_filter]
if school_type_filter != 'All':
    edu_df = edu_df[edu_df['School Type'] == school_type_filter]
if trust_match_filter == 'Matched Only':
    edu_df = edu_df[edu_df['Trust Matched'].str.lower() == 'match']

# --------------------------
# Metrics
# --------------------------
total_sales = edu_df['Total Price'].sum()
total_orders = edu_df['Order Number'].nunique()
total_customers = edu_df['Email'].nunique()

col1, col2, col3 = st.columns(3)
col1.metric("Total Sales", f"¬£{total_sales:,.0f}")
col2.metric("Unique Orders", f"{total_orders}")
col3.metric("Unique Customers", f"{total_customers}")

# --------------------------
# Region-wise Sales Bar Chart
# --------------------------
st.markdown("### üìä Regional Sales Distribution")
region_sales = edu_df.groupby('Region')['Total Price'].sum().reset_index().sort_values(by='Total Price', ascending=False)
fig, ax = plt.subplots(figsize=(10, 5))
sns.barplot(x='Region', y='Total Price', data=region_sales, palette='Blues_d', ax=ax)
ax.set_title("Sales by Region")
ax.set_xlabel("Region")
ax.set_ylabel("Total Sales (¬£)")
plt.xticks(rotation=45)
st.pyplot(fig)

# --------------------------
# School Type Analysis
# --------------------------
st.markdown("### üè´ School Type Order Breakdown")
school_counts = edu_df['School Type'].value_counts().reset_index()
school_counts.columns = ['School Type', 'Order Count']
fig2, ax2 = plt.subplots(figsize=(8, 4))
sns.barplot(x='Order Count', y='School Type', data=school_counts, palette='Greens_d', ax=ax2)
ax2.set_title("Orders by School Type")
st.pyplot(fig2)

# --------------------------
# Monthly Sales Trends
# --------------------------
st.markdown("### üìà Monthly Order Trend")
edu_df['Order Date'] = pd.to_datetime(edu_df['Order Date'])
edu_df['Month'] = edu_df['Order Date'].dt.to_period('M').astype(str)
monthly_sales = edu_df.groupby('Month')['Total Price'].sum().reset_index()
fig3, ax3 = plt.subplots(figsize=(10, 4))
sns.lineplot(data=monthly_sales, x='Month', y='Total Price', marker='o', ax=ax3)
ax3.set_title("Monthly Sales Over Time")
ax3.set_ylabel("Sales (¬£)")
plt.xticks(rotation=45)
st.pyplot(fig3)

# --------------------------
# Data Table View
# --------------------------
st.markdown("### üîç Filtered Data Table")
st.dataframe(edu_df[['Order Number', 'School Name', 'Region', 'School Type', 'Total Price', 'Order Date', 'Trust Matched']].sort_values(by='Order Date', ascending=False))

# --------------------------
# Footer
# --------------------------
st.markdown("---")
st.markdown("Built by Khwaja Abdul Ghani Ghafoori | MSc Business Analytics & Finance | University of Dundee")

